import re

USTREAM_KEY       = '8C8687A40DFFF62C23AAE5E021BD2BFE'
USTREAM_INFO_URL  = 'http://api.ustream.tv/json/channel/%s/getInfo?key=%s'

def MetadataObjectForURL(url):

  Log('In ustream metadata for URL and URL is ------>' + url)

  json = JSON.ObjectFromURL(USTREAM_INFO_URL % (url[url.rfind('/')+1:], USTREAM_KEY))
  #Log(JSON.StringFromObject(json))

  video = json['results']
  clip_url = video['url']
  title = video['title']
  if video['status'] == 'offline':
    title = title + ' - Offline'
  summary = StripHTML(video['description'])
  thumb = video['imageUrl']['medium']

  return VideoClipObject(
      url = clip_url,
      title = title,
      summary = summary,
      thumb = thumb
    )

def MediaObjectsForURL(url):

  return [
     MediaObject(
         audio_channels = 2,
         parts = [PartObject(key=Callback(PlayVideo, url = url))]
     )
  ]

# #BASE_URL = 'http://video.euronews.net/'
# #RE_VIDEO_URL = Regex('videofile:"(?P<video_url>[^"]+)"')
 
@indirect
def PlayVideo(url):

# Test URL for curl: http://localhost:32400/system/services/url/lookup?url=http%3A//www.ustream.tv/channel/live-iss-stream

  RE_CHANNEL_ID     = Regex('Channel\sID\:\s+(\d+)')
  RE_RTMP_URL       = Regex('(rtmp\:\/\/[^\x00]+)')
  RE_STREAM_NAME    = Regex('streamName(?:\W+)([^\x00]+)')
  RE_STATUS         = Regex('status(?:\W+)([^\x00]+)')

  USTREAM_SWF_URL   = 'http://www.ustream.tv/flash/viewer.swf'
  #USTREAM_SWF_ALT   = 'http://static-cdn1.ustream.tv/swf/live/viewer.swf'
  #USTREAM_SWF_ALT2  = 'http://static-cdn1.ustream.tv/swf/live/viewer.rsl:209.swf'


###############################################################################

  html = HTTP.Request(url).content
  #Log(html)
  channelId = RE_CHANNEL_ID.search(html).group(1)
  #  Log('channelId ---> ' + channelId)
  # iss-live stream id: 11239762
  # 
  amf_url = ('http://cdngw.ustream.tv/Viewer/getStream/1/' + channelId + '.amf')
#  Log ('amf_url ---> ' + amf_url)
  amf_content = HTTP.Request(amf_url).content
  status = RE_STATUS.search(amf_content).group(1)
  Log('Channel status is: ' + status)
  if status != 'offline':
    # We're dealing with a live streaming channel
    rtmp_url = RE_RTMP_URL.search(amf_content).group(1)
    #  Log ('rtmp_url ---> ' + rtmp_url)
    stream_name = RE_STREAM_NAME.search(amf_content).group(1)
    #  Log ('stream_name ---> ' + stream_name)

    if 'flash' in rtmp_url:
      rtmp_url = rtmp_url + '/' + stream_name
      swf = None
    else:
      swf = USTREAM_SWF_URL

    Log('rtmp_url: ' + rtmp_url)
    Log('stream_name: ' + stream_name)
    return IndirectResponse(VideoClipObject, key = RTMPVideoURL(url=rtmp_url, clip=stream_name, swf_url=swf, live=True))
  else:
    #http://api.ustream.tv/[html|json|xml|php]/[subject]/[subjectUID|scope]/[command]/[otherparams]/?page=[n]&limit=[l]&key=[devkey]
    #req = 'http://api.ustream.tv/json/channel/iss-live-stream/[command]/[otherparams]/?page=[n]&limit=[l]&key=[devkey]'
    return None

      # Request the URL
      #page = HTTP.Request(url).content
   
      # The source of the page actually contains a link to the associated flv file. We can simply find
      # this by using a regular expression to find it. Then, we just redirect.
      # video_url = RE_VIDEO_URL.search(page).group('video_url') + ".flv"
   
    #return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=rtmp_url, clip=clip, swf_url=CBS_SWF))

def NormalizeURL(url):
  return url

def StripHTML(stringToStrip,paragraphsToNewLines=False):
  # Srips HTML tags from a string
  if paragraphsToNewLines:
    stringToStrip = re.sub(r'<\s*/p>', r'\n\n', stringToStrip)
  stringToStrip = re.sub(r'<[^>]*>', r'', stringToStrip)
  return stringToStrip